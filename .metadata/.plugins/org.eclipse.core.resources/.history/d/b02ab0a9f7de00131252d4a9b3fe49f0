import java.util.Iterator;
import java.util.Set;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import org.junit.Before;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertEquals;

/*
2014 CITS2200 Project
Done by: Edwin Chia (21193891)
Submitted on: 27/05/2014
*/

/**
 * A test class to test the methods provided by the ECDAGMap 
 * implementation are correct.
 * 
 * @author Edwin Chia 
 * @version 1.0
 * @since 2014-05-1
 */
@RunWith(JUnit4.class)
public class ECDAGMapTest {
	private Integer a, b, c, d;
	private String s1, s2, s3, s4;
	private ECDAGMap<Integer, String> g;

	@Before
	public void setup() {
		g = new ECDAGMap<Integer, String>();
		a = 1;
		b = 2;
		c = 3;
		d = 4;
		
		s1 = "ABC";
		s2 = "DEF";
		s3 = "GHI";
		s4 = "JKL";
	}

    /**
     * Tests that the default constructor returns an empty map.
     */
    @Test
    public void testNewMapLinked() {
        assertTrue(g.isEmpty());
    }
    
    /**
     * Tests that the put method indeed adds a vertex to the graph
     */
    @Test
    public void testPut() {
    	assertTrue(g.isEmpty());						// graph should be empty initially
    	g.put(a, s1);
    	g.put(b, s3);
    	
    	assertFalse(g.isEmpty());						// graph shouldn't be empty now
    	assertTrue(g.containsKey(a));					// graph should contain the vertex with key 'a'
    	assertTrue(g.containsKey(b));					// graph should contain the vertex with key 'b'
    	assertEquals(g.get(a), s1);				// the vertex with key 'a' should be associated with the value of string s1
    	assertEquals(g.get(b), s3);				// the vertex with key 'c' should be associated with the value of string s3
    }

    /**
     * Tests that the put method would throw an exception if the key is already in 
     * the graph
     */
    @Test(expected=IllegalArgumentException.class)
    public void testPutKeyAlreadyExists() {
    	g.put(a, s1);
    	g.put(a, s4);	// the key 'a' already exists in the graph and hence an exception would be thrown here
    }
    
    /**
     * Tests that the put method would throw an exception if the key provided is null
     */
    @Test(expected=IllegalArgumentException.class)
    public void testPutNull() {
    	g.put(null, s1);
    }
    
    /** 
     * Tests that the get method returns the right value for a given key
     */
    @Test
    public void testGet() {
    	assertTrue(g.isEmpty());
    	g.put(a, s1);
    	g.put(b, s3);
    	g.put(c, s2);
    	g.put(d, s4);
    	
    	assertEquals(g.get(a), s1);				// the vertex with key 'a' should be associated with the value of string s1
    	assertEquals(g.get(b), s3);				// the vertex with key 'b' should be associated with the value of string s3
    	assertEquals(g.get(c), s2);				// the vertex with key 'c' should be associated with the value of string s2
    	assertEquals(g.get(d), s4);				// the vertex with key 'd' should be associated with the value of string s4
    }
    
    /** 
     * Tests that the get method throws an exception if the key provided does not exist in the graph
     */
    @Test(expected=IllegalArgumentException.class)
    public void testPutNotExists() {
    	assertTrue(g.isEmpty());
    	g.put(a, s1);
    	g.put(b, s3);
    	g.put(c, s2);
    	g.get(d); 										// method would throw an exception since the key is not in the graph
    }
    
    /**
     * Tests that the remove method removes a vertex from the graph correctly
     */
    @Test
    public void testRemove() {
    	g.put(a, s1);
    	g.put(b, s2);
    	g.put(c, s3);
    	g.put(d, s4);
    	g.addDependency(a, b);
    	g.addDependency(b, c);
    	g.addDependency(a, d);
    	g.addDependency(b, d);
    	g.addDependency(c, d);
    	
    	assertTrue(g.get(a).equals(s1) && g.get(b).equals(s2) && g.get(c).equals(s3) && g.get(d).equals(s4));	// Should pass as the keys and values are all in the graph
    	
    	Set<Integer> s1 = g.getSuccessors(a);					// successors of vertex with key 'a' before removal
    	Set<Integer> s2 = g.getSuccessors(b);					// successors of vertex with key 'b' before removal
    	g.remove(d);
    	g.remove(c);
    	Set<Integer> s3 = g.getSuccessors(a);					// successors of vertex with key 'a' after removal
    	Set<Integer> s4 = g.getSuccessors(b);					// successors of vertex with key 'b' after removal
    	
    	assertFalse(s1.equals(s3) && s2.equals(s4));			// the sets of the successors shouldn't be equal correspondingly after removal
    	assertFalse(g.containsKey(d) && g.containsKey(c));		// the graph shouldn't contain the keys anymore
    }
    
   /**
    * Tests that the remove method would throw an exception if the key provided is not 
    * in the graph
    */
   @Test(expected=IllegalArgumentException.class)
   public void testRemoveNotExists() {
	   g.put(a, s1);
	   g.put(b, s2);
	   g.put(c, s3);
	   g.remove(d);	// key 'd' wasn't added into the graph and hence an excpetion would be thrown here
    }
   
    /**
     * Tests that the addDependency method only adds a dependency in the right 
     * circumstances.
     */
    @Test
    public void testAddDependency() {
    	g.put(a, s1);
    	g.put(b, s2);
    	g.put(c, s3);
    	g.put(d, s4);
    	
    	/* 
    	 * A --> B --> C 
    	 * 
    	 * D
    	 * 
    	 * The graph is still acyclic and hence dependencies could be added
    	 */
    	g.addDependency(a, b);
    	g.addDependency(b, c);
    	assertTrue(g.isAcyclic());
    	

    	/* 
    	 * ------------>
    	 * |     	   |
    	 * A --> B --> C
    	 * ^     |	   ^
    	 * |     | _ _ |
    	 * D
    	 * 
    	 * The graph is still acyclic and hence dependencies could added
    	 */
    	g.addDependency(a, c);
    	g.addDependency(d, a);
    	assertTrue(g.isAcyclic());
    }
    
    /**
     * Tests that the addDependency method would throw an exception if the addition would cause
     * the graph to be acyclic.
     */
    @Test(expected=IllegalArgumentException.class)
    public void testAddDependencyAcyclic() {
    	g.put(a, s1);
    	g.put(b, s2);
    	g.put(c, s3);
    	g.put(d, s4);
    	
    	/*       
    	 * A --> B --> C
    	 *       ^	   |
    	 *       | _ _ |
    	 * D
    	 * 
    	 * The graph is no longer acyclic and hence dependency could not be added
    	 */
    	g.addDependency(a, b);
    	g.addDependency(b, c);
    	g.addDependency(c, b); 			// this addition will cause the graph to be cyclic and hence exception will be thrown here
    }
    
    /**
     * Tests that the addDependency method would throw an exception if either requirement or dependent 
     * are not elements of the graph
     */
    @Test(expected=IllegalArgumentException.class)
    public void testAddDependencyNotFound() {
    	g.put(a, s1);
    	g.put(b, s2);
    	
    	g.addDependency(a, c);	// c is not an element of the graph and hence an exception would be thrown here
    }
   
    /**
     * Tests that the removeDependency method removes the dependency from the graph correctly
     * and if either requirement or dependent are not vertices in the graph, throw an exception
     */
    @Test(expected=IllegalArgumentException.class)
    public void testRemoveDependency() {
    	g.put(a, s1);
    	g.put(b, s2);
    	g.put(c, s3);
    	g.put(d, s4);
    	int e = 5;
    	
    	g.addDependency(a, b);	
    	g.addDependency(a, c);
    	g.addDependency(a, d);
    	
    	/*
    	 * Below tests should pass
    	 */
    	assertTrue(g.isDependent(a, b));
    	assertTrue(g.isDependent(a, c));
    	assertTrue(g.isDependent(a, d));
    	
    	g.removeDependency(a, b);		
    	
    	/*
    	 * b is no longer dependent on a, the
    	 * isDependent(a, b) method should return false.
    	 * Other dependencies remain in the graph.
    	 */
    	assertFalse(g.isDependent(a, b));
    	assertTrue(g.isDependent(a, c));
    	assertTrue(g.isDependent(a, d));
    	
    	g.removeDependency(e,  d);	// should throw an exception here since e is not in the graph
    }
    
    /**
     * Tests that the isEmpty method returns true when the graph is empty
	 * and false otherwise
     */
    @Test
    public void testIsEmpty() {
    	g.put(a, s1);
    	g.put(b, s2);
    	
    	assertFalse(g.isEmpty());	// after putting two keys into the graph, isEmpty() should return false.
    	
    	g.remove(a);
    	g.remove(b);				
    	assertTrue(g.isEmpty());	// after removing the two keys, the graph should be empty now.
    }
    
    /**
     * Tests that the containsKey method returns the right boolean value regarding the
     * existence of the key in the graph
     */
    @Test
    public void testContainsKey() {
    	g.put(a, s1);
    	g.put(b, s2);
    	g.put(c, s3);
    	
    	/*
    	 * These tests below should pass since the keys are
    	 * in the graph
    	 */
    	assertTrue(g.containsKey(a));				
    	assertTrue(g.containsKey(b));
    	assertTrue(g.containsKey(c));
    		
    	assertFalse(g.containsKey(d));	// should return false as d wasn't added into the graph
    }
    
    /**
     * Tests that the containsKey method returns the right boolean value regarding the
     * existence of the key in the graph
     */
    @Test
    public void testContainsValue() {
    	g.put(a, s1);
    	g.put(b, s2);
    	g.put(c, s3);
    	
    	/*
    	 * These tests below should pass since the values are
    	 * in the graph
    	 */
    	assertTrue(g.containsValue(s1));				
    	assertTrue(g.containsValue(s2));
    	assertTrue(g.containsValue(s3));
    		
    	assertFalse(g.containsValue(s4));	// should return false as value 's4' wasn't added to the graph alongside a key
    }
    
    /**
     * Tests that the isDependent returns true if 2 keys are dependent 
     */
    @Test
    public void testIsDependent() {
    	g.put(0, s1);
 	   	g.put(1, s2);
 	   	g.put(2, s3);
 	   	g.put(3, s4);
 	   	g.put(4, s4);
 	   	g.put(5, s4);
 	   	g.put(6, s4);
 	   	g.put(7, s1);
 	   	g.put(8, s1);
 	   	g.put(9, s1);
 	   	g.put(10, s1);
 	   	assertEquals(g.getLongestPath(), 0);		// at the moment there are no requirements, and hence the length of longest path is 0
 	   	
 	   	//Refer to image01 in the folder for the graph representation
 	   	g.addDependency(0, 3);
 	   	g.addDependency(0, 4);
 	   	g.addDependency(1, 3);
 	   	g.addDependency(1, 5);
 	   	g.addDependency(2, 6);
 	   	g.addDependency(2, 7);
 	   	g.addDependency(2, 8);
 	   	g.addDependency(3, 7);
 	   	g.addDependency(4, 8);
 	   	g.addDependency(5, 10);
 	   	g.addDependency(7, 9);
 	   	g.addDependency(7, 10);
 	   	g.addDependency(0, 2);

    	assertTrue(g.isDependent(0, 4));	// should return true as 0 is a immediate descendant of 4
    	assertTrue(g.isDependent(0, 10));	// should return true as 0 is a descendant of 10
    	assertFalse(g.isDependent(1, 4));	// should return false as 4 is not a descendant of 1
    	assertFalse(g.isDependent(1, 8));	// should return false as 8 is not a descendant of 1
    	assertFalse(g.isDependent(1, 20));	// should return false since the dependent 20 is not an element in the graph
    	assertFalse(g.isDependent(100, 2));	// should return false since the requirement 100 is not an element in the graph
    }
    
    /**
     * Tests that the getClone method returns a shallow clone of the DAGMap
     */
    @SuppressWarnings("unchecked")
	@Test
    public void testClone() {
    	g.put(a, s1);
    	g.put(b, s2);
    	g.put(c, s3);
    	g.put(d, s4);
    	g.addDependency(a, b);
    	g.addDependency(b, c);

    	ECDAGMap<Integer, String> temp = (ECDAGMap<Integer, String>) g.clone();
    	
    	assertEquals(temp, g);			// they should be equal
    	
    	temp.addDependency(b, d);
    	
    	assertFalse(temp.equals(g));	// they shouldn't be equal anymore as temp has an additional dependency now
    	
    	temp.removeDependency(b, d);
    	g.addDependency(a, d);
    	temp.addDependency(a, d);
    	
    	assertEquals(temp, g);			// they should be back to equal now
    }
    
    /**
     * Tests that the iterator method returns an iterator that processes the keys
     * in a topologically manner
     */
    @Test
    public void iterator() {
    	g.put(0, s1);
 	   	g.put(1, s2);
 	   	g.put(2, s3);
 	   	g.put(3, s4);
 	   	g.put(4, s4);
 	   	g.put(5, s4);
 	   	g.put(6, s4);
 	   	g.put(7, s1);
 	   	g.put(8, s1);
 	   	g.put(9, s1);
 	   	g.put(10, s1);
    	
 	   	//Refer to image01 in the folder for the graph representation
 	   	g.addDependency(0, 3);
 	   	g.addDependency(0, 4);
 	   	g.addDependency(1, 3);
 	   	g.addDependency(1, 5);
 	   	g.addDependency(2, 6);
 	   	g.addDependency(2, 7);
 	   	g.addDependency(2, 8);
 	   	g.addDependency(3, 7);
 	   	g.addDependency(4, 8);
 	   	g.addDependency(5, 10);
 	   	g.addDependency(7, 9);
 	   	g.addDependency(7, 10);
 	   	g.addDependency(0, 2);
 	   	Iterator<Integer> it = g.iterator();
 	   
 	   	// topological order of the keys should be [1, 5, 0, 2, 6, 4, 8, 3, 7, 10, 9]
 	   	assertTrue(it.next().equals(1));
 	   	assertTrue(it.next().equals(5));
 	   	assertTrue(it.next().equals(0));
 	   	assertTrue(it.next().equals(2));
 	   	assertTrue(it.next().equals(6));
 	   	assertTrue(it.next().equals(4));
 	   	assertTrue(it.next().equals(8));
 	   	assertTrue(it.next().equals(3));
 	   	assertTrue(it.next().equals(7));
 	   	assertTrue(it.next().equals(10));
 	   	assertTrue(it.next().equals(9));
    }
    
    /**
     * Tests that the equals method return true only if both DAGMaps are equal
     */
    @Test
    public void testEquals() {
    	g.put(a, s1);
    	g.put(b, s2);
    	g.put(c, s3);
    	g.put(d, s4);
    	ECDAGMap<Integer, String> temp = new ECDAGMap<Integer, String>();
    	
    	temp.put(a, s1);
    	temp.put(b, s2);
    	temp.put(c, s3);
    	temp.put(d, s4);
    	
    	assertEquals(temp, g);			// they should be equal as they have the same set of keys, values and dependencies
    	
    	temp.remove(a);
    	temp.remove(d);
    	
    	assertFalse(temp.equals(g));	// they should not be equal as they do not have the same set of keys
    	
    	temp.put(a, s1);
    	temp.put(d, s3);
    	
    	assertFalse(temp.equals(g));	// they should not be equal as they do not have the same set of values
    	
    	temp.remove(d);
    	temp.put(d,  s4);
    	
    	assertEquals(temp, g);			// they should be back to equal now
    	
    	g.addDependency(a, b);
    	
    	assertFalse(temp.equals(g));	// they should not be equal as they they do not have the same dependencies
    	
    	temp.addDependency(a, b);
    	
    	assertTrue(temp.equals(g));		// they should be equal as they have the same set of keys, values and dependencie
    	
    	g.removeDependency(a, b);
    	temp.removeDependency(a, b);
    	
    	assertTrue(temp.equals(g));		// they should still be equal 
    }
    
    /**
     * Tests that the getSuccessors method returns the right set of keys
     */
    @Test
    public void testGetSuccesors() {
    	g.put(a, s1);
    	g.put(b, s2);
    	g.put(c, s3);
    	g.put(d, s4);
    	g.addDependency(a, b);
    	g.addDependency(a, c);
    	g.addDependency(a, d);
    	Set<Integer> s = g.getSuccessors(a);
    	
    	assertTrue(s.contains(c) && s.contains(d));	// s should contain these keys
    }
    
    /**
     * Tests that the getSuccessors method would throw an exception if the key provided does not
     * exists in the graph
     */
    @Test(expected=IllegalArgumentException.class)
    public void testGetSuccesorsKeyDoesNotExists() {
    	g.put(a, s1);
    	g.put(b, s2);
    	g.put(c, s3);
    	g.getSuccessors(d);	// an exception should be thrown here as key 'd' is not in the graph
    }

    /**
     * Tests that the getPredecessors method returns the right set of keys
     */
    @Test
    public void testGetPredecessors() {
    	g.put(a, s1);
    	g.put(b, s2);
    	g.put(c, s3);
    	g.put(d, s4);
    	g.addDependency(a, d);
    	g.addDependency(b, d);
    	g.addDependency(c, d);
    	Set<Integer> s = g.getPredecessors(d);
    	
    	assertTrue(s.contains(a) && s.contains(b) && s.contains(c));	// s should contain these keys
    }
    
    /**
     * Tests that the getPredecessors method would throw an exception if the key provided does not
     * exists in the graph
     */
    @Test(expected=IllegalArgumentException.class)
    public void testGetPredecessorsKeyDoesNotExists() {
    	g.put(a, s1);
    	g.put(b, s2);
    	g.put(c, s3);
    	g.getPredecessors(d);	// an exception should be thrown here as d is not in the graph
    }
    
    /**
    * Tests that the getWidth method returns the minimum number of paths to cover the graph
    */
    @Test
    public void testGetWidth() {
    	g.put(0, s1);
    	g.put(1, s2);
    	g.put(2, s3);
    	g.put(3, s4);
    	g.put(4, s4);
    	g.put(5, s4);
    	g.put(6, s4);
    	g.put(7, s1);
    	g.put(8, s1);
    	g.put(9, s1);
    	g.put(10, s1);
    	assertEquals(g.getWidth(), 11);	// at the moment there are no requirements, and hence the number of minimum paths should be equals to the number of vertices
   	
    	/*
    	 * Refer to image01 in the folder for the graph representation
    	 */
    	g.addDependency(0, 2);
    	g.addDependency(0, 3);
    	g.addDependency(0, 4);
    	g.addDependency(1, 3);	
    	g.addDependency(2, 6);
    	g.addDependency(2, 7);
	   	g.addDependency(2, 8);
	   	g.addDependency(3, 7);
	   	g.addDependency(4, 8);
	   	g.addDependency(5, 10);
	   	g.addDependency(7, 9);
	   	g.addDependency(7, 10);
	
	   	assertEquals(g.getWidth(), 4);	// the minimum number of paths should be 4
    }
   
    /**
     * Tests that the getLongestPath method returns the length of the longest path
     */
    @Test
    public void testGetLongestPath() {
    	g.put(0, s1);
    	g.put(1, s2);
    	g.put(2, s3);
    	g.put(3, s4);
    	g.put(4, s4);
    	g.put(5, s4);
    	g.put(6, s4);
    	g.put(7, s1);
    	g.put(8, s1);
    	g.put(9, s1);
    	g.put(10, s1);
    	assertEquals(g.getLongestPath(), 0);		// at the moment there are no requirements, and hence the length of longest path is 0
   	
    	//Refer to image01 in the folder for the graph representation
    	g.addDependency(0, 2);
    	g.addDependency(0, 3);
    	g.addDependency(0, 4);
    		
	   	g.addDependency(4, 6);
	   	g.addDependency(4, 5);
	   	g.addDependency(6, 7);
	   	g.addDependency(7, 8);
	   	g.addDependency(8, 5);
	   	assertEquals(g.getLongestPath(), 3);		// the length of the longest path should be 3
    }
   
    /**
     * Tests that the toString method returns the right representation of the graph
     */
    @Test
    public void testToString() {
    	g.put(a, s1);
    	g.put(b, s2);
    	g.put(c, s3);
    	g.put(d, s4);
    	g.addDependency(a, d);
    	g.addDependency(b, d);
    	g.addDependency(c, d);
    	String s = "1 : ABC\n" + "1 : 4\n" + "2 : DEF\n" + "2 : 4\n" + "3 : GHI\n" + "3 : 4\n" + "4 : JKL\n"; // the string representation of g 
    	assertEquals(s, g.toString());
    }
}
